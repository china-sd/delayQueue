// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.19.2
// source: delayQueue.proto

package queueRpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DelayQueueClient is the client API for DelayQueue service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DelayQueueClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushResponse, error)
	Pop(ctx context.Context, in *PopRequest, opts ...grpc.CallOption) (*PopResponse, error)
	Del(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*DelResponse, error)
}

type delayQueueClient struct {
	cc grpc.ClientConnInterface
}

func NewDelayQueueClient(cc grpc.ClientConnInterface) DelayQueueClient {
	return &delayQueueClient{cc}
}

func (c *delayQueueClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/delayQueue.DelayQueue/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *delayQueueClient) Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushResponse, error) {
	out := new(PushResponse)
	err := c.cc.Invoke(ctx, "/delayQueue.DelayQueue/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *delayQueueClient) Pop(ctx context.Context, in *PopRequest, opts ...grpc.CallOption) (*PopResponse, error) {
	out := new(PopResponse)
	err := c.cc.Invoke(ctx, "/delayQueue.DelayQueue/Pop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *delayQueueClient) Del(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*DelResponse, error) {
	out := new(DelResponse)
	err := c.cc.Invoke(ctx, "/delayQueue.DelayQueue/Del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DelayQueueServer is the server API for DelayQueue service.
// All implementations must embed UnimplementedDelayQueueServer
// for forward compatibility
type DelayQueueServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	Push(context.Context, *PushRequest) (*PushResponse, error)
	Pop(context.Context, *PopRequest) (*PopResponse, error)
	Del(context.Context, *DelRequest) (*DelResponse, error)
	mustEmbedUnimplementedDelayQueueServer()
}

// UnimplementedDelayQueueServer must be embedded to have forward compatible implementations.
type UnimplementedDelayQueueServer struct {
}

func (UnimplementedDelayQueueServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedDelayQueueServer) Push(context.Context, *PushRequest) (*PushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedDelayQueueServer) Pop(context.Context, *PopRequest) (*PopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pop not implemented")
}
func (UnimplementedDelayQueueServer) Del(context.Context, *DelRequest) (*DelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Del not implemented")
}
func (UnimplementedDelayQueueServer) mustEmbedUnimplementedDelayQueueServer() {}

// UnsafeDelayQueueServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DelayQueueServer will
// result in compilation errors.
type UnsafeDelayQueueServer interface {
	mustEmbedUnimplementedDelayQueueServer()
}

func RegisterDelayQueueServer(s grpc.ServiceRegistrar, srv DelayQueueServer) {
	s.RegisterService(&DelayQueue_ServiceDesc, srv)
}

func _DelayQueue_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DelayQueueServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delayQueue.DelayQueue/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DelayQueueServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DelayQueue_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DelayQueueServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delayQueue.DelayQueue/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DelayQueueServer).Push(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DelayQueue_Pop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DelayQueueServer).Pop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delayQueue.DelayQueue/Pop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DelayQueueServer).Pop(ctx, req.(*PopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DelayQueue_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DelayQueueServer).Del(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delayQueue.DelayQueue/Del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DelayQueueServer).Del(ctx, req.(*DelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DelayQueue_ServiceDesc is the grpc.ServiceDesc for DelayQueue service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DelayQueue_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "delayQueue.DelayQueue",
	HandlerType: (*DelayQueueServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _DelayQueue_Ping_Handler,
		},
		{
			MethodName: "Push",
			Handler:    _DelayQueue_Push_Handler,
		},
		{
			MethodName: "Pop",
			Handler:    _DelayQueue_Pop_Handler,
		},
		{
			MethodName: "Del",
			Handler:    _DelayQueue_Del_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "delayQueue.proto",
}
